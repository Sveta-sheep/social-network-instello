{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","helpers/validators.js","components/common/FormsControls/FormsControls.js","components/Dialogs/Dialogs.module.css","components/hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","required","value","undefined","maxLength","length","email","test","FormContainer","input","meta","Element","props","hasError","touched","error","className","styles","formsControls","Textarea","Input","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","s","dialog","to","id","dialogWrapper","activeClassName","active","friendAvatar","src","avatar","name","Message","message","avatarMessage","messageItem","text","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","textWrapper","Field","component","validate","placeholder","sendMessage","Dialogs","dialogsElement","dialogs","map","messagesElements","messages","dialogsItems","formData","newMessageText","compose","connect","dialogsPage","dispatch","addMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"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","file":"static/js/6.68ff02e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formsControls\":\"FormsControls_formsControls__1HYau\",\"error\":\"FormsControls_error__6jTk1\",\"formSummaryError\":\"FormsControls_formSummaryError__2atmO\",\"formLogin\":\"FormsControls_formLogin__12L3a\",\"formLoginError\":\"FormsControls_formLoginError__2fZkF\"};","import React from 'react'\r\n\r\nexport const required = value => value ? undefined : \"Field is required\"\r\n\r\nexport const maxLength = maxLength => value => value.length > maxLength\r\n    ? `Max length is ${maxLength}`\r\n    : undefined\r\n\r\nexport const email = value =>\r\n    value && !/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/i.test(value)\r\n        ? 'Invalid email address'\r\n        : undefined","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\n\r\nconst FormContainer = ({input, meta, Element, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={styles.formsControls + \" \" + (hasError ? styles.error : \"\")}>\r\n        <div>\r\n        <Element {...input} {...props}/>\r\n        </div>\r\n        {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    return (\r\n        <FormContainer {...props} Element=\"textarea\"></FormContainer>\r\n    )\r\n}\r\n\r\nexport const Input = (props) => {\r\n    return (\r\n        <FormContainer {...props} Element=\"input\"></FormContainer>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__16bkK\",\"dialogsItems\":\"Dialogs_dialogsItems__2bvb6\",\"dialog\":\"Dialogs_dialog__3j7q_\",\"active\":\"Dialogs_active__Rx-QJ\",\"messages\":\"Dialogs_messages__66H6i\",\"message\":\"Dialogs_message__23L1p\",\"messageItem\":\"Dialogs_messageItem__2ZM0l\",\"avatarMessage\":\"Dialogs_avatarMessage__iQfvC\",\"friendAvatar\":\"Dialogs_friendAvatar__3geDq\",\"dialogWrapper\":\"Dialogs_dialogWrapper__2W0zO\",\"textWrapper\":\"Dialogs_textWrapper__hBjXN\",\"messageArea\":\"Dialogs_messageArea__3jfLR\",\"sendMessage\":\"Dialogs_sendMessage__1NRIM\"};","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    \r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink \r\n                to={\"/dialogs/\" + props.id} \r\n                className={s.dialogWrapper}\r\n                activeClassName={s.active}>\r\n                <img className={s.friendAvatar} src={props.avatar} /> \r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s.avatarMessage}></div>\r\n            <div className={s.messageItem}>{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react'\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../helpers/validators';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\nconst maxLength50 = maxLength(50)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let onSendMessage = (formData) => {\r\n        props.sendMessage(formData.newMessageText)\r\n    }\r\n\r\n    let dialogsElement = props.dialogs\r\n        .map(dialog => <DialogItem id={dialog.id} name={dialog.name} avatar={dialog.avatar} />)\r\n\r\n    let messagesElements = props.messages\r\n        .map(message => <Message text={message.message} />)\r\n\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"} />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={onSendMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit} className={s.textWrapper}>\r\n        <Field\r\n            component={Textarea}\r\n            name=\"newMessageText\"\r\n            validate={[required, maxLength50]}\r\n            placeholder=\"Enter your message\" />\r\n        <button className={s.sendMessage}>Send</button>\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: \"newMessageText\"\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { addMessageActionCreator, updateMessageTextActionCreator } from '../../redux/dialogs-reducer';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport Dialogs from './Dialogs';\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//     return <StoreContext.Consumer>\r\n//         {store => {\r\n//             let state = store.getState().dialogsPage\r\n\r\n//             let onNewMessageChange = (message) => {\r\n//                 let action = updateMessageTextActionCreator(message)\r\n//                 store.dispatch(action)\r\n//             }\r\n\r\n//             let onSendMessageClick = () => {\r\n//                 store.dispatch(addMessageActionCreator())\r\n//             }\r\n//             return (\r\n//                 <Dialogs\r\n//                     onMessageChange={onNewMessageChange}\r\n//                     sendMessage={onSendMessageClick}\r\n//                     dialogsPage={state}\r\n//                     dialogs={state.dialogs}\r\n//                     messages={state.messages}\r\n//                     newMessageText={state.newMessageText} />\r\n//             )\r\n//         }\r\n//         }\r\n//     </StoreContext.Consumer>\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch ) => {\r\n    return {\r\n        sendMessage: (message) => {\r\n            dispatch(addMessageActionCreator(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}